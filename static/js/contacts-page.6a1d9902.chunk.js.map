{"version":3,"sources":["components/ErrorNotification/ErrorNotification.js","redux/contacts/contacts-selectors.js","components/ContactEditor/ContactEditor.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","pages/ContactsPage/ContactsPage.js"],"names":["ErrorNotification","action","message","dispatch","useDispatch","handleErrorClose","event","reason","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","size","color","onClick","fontSize","getContacts","state","contacts","items","getFilter","filter","getError","error","getIsLoading","isLoading","getFilteredContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","useStyles","makeStyles","theme","field","marginBottom","spacing","ContactEditor","isOpen","useSelector","contactsSelectors","c","Dialog","fullWidth","maxWidth","DialogTitle","id","DialogContent","initialValues","number","validationSchema","Yup","matches","required","onSubmit","values","setSubmitting","length","alert","updatedContact","contactsOperations","updateContact","addContact","isSubmitting","type","label","component","TextField","className","LinearProgress","DialogActions","Button","variant","disabled","card","display","flexDirection","height","cardContent","flexGrow","cardActions","justifyContent","ContactItem","onEdit","Grid","item","xs","sm","md","Card","CardContent","Typography","CardActions","disableSpacing","IconButton","deleteContact","root","marginTop","listStyle","ContactList","useEffect","fetchContacts","container","map","Filter","onChange","e","contactsActions","changeFilter","target","value","ContactsPage","useState","isOpenDialog","setIsOpenDialog","currentContact","setCurrentContact","shouldOpenDialog","Boolean","Container","resetError"],"mappings":"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","file":"static/js/contacts-page.6a1d9902.chunk.js","sourcesContent":["import { IconButton, Snackbar } from '@material-ui/core';\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport { useDispatch } from 'react-redux';\n\nexport default function ErrorNotification({ action, message }) {\n  const dispatch = useDispatch();\n\n  const handleErrorClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    dispatch(action());\n  };\n\n  return (\n    <>\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        open\n        autoHideDuration={6000}\n        message={message}\n        onClose={handleErrorClose}\n        action={\n          <IconButton\n            size=\"small\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            onClick={handleErrorClose}\n          >\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        }\n      />\n    </>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getError = state => state.contacts.error;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getFilteredContacts = createSelector(\n  [getFilter, getContacts],\n  (filter, contacts) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","import * as Yup from 'yup';\n\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  LinearProgress,\n} from '@material-ui/core';\nimport { Field, Form, Formik } from 'formik';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { TextField } from 'formik-material-ui';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  field: {\n    marginBottom: theme.spacing(3),\n  },\n}));\n\nexport default function ContactEditor({ isOpen, onClose, contact }) {\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n  const c = useStyles();\n\n  const isInContacts = name => {\n    name = name.toLowerCase();\n    return (\n      contacts.filter(contact => contact.name.toLowerCase() === name).length > 0\n    );\n  };\n\n  const addContact = ({ name, number }) => {\n    dispatch(contactsOperations.addContact({ name, number }));\n    onClose();\n  };\n\n  const updateContact = ({ name, number }) => {\n    const updatedContact = { ...contact, name, number };\n    dispatch(contactsOperations.updateContact(updatedContact));\n  };\n\n  const onSubmit = (values, { setSubmitting }) => {\n    if (isInContacts(values.name)) {\n      alert(`${values.name} is already in contacts`);\n      setSubmitting(false);\n      return;\n    }\n\n    if (contact) {\n      updateContact(values);\n    } else {\n      addContact(values);\n    }\n    onClose();\n  };\n\n  return (\n    <Dialog\n      fullWidth\n      maxWidth=\"xs\"\n      open={isOpen}\n      onClose={onClose}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <DialogTitle id=\"form-dialog-title\">\n        {contact ? 'Edit contact' : 'Add contact'}\n      </DialogTitle>\n      <DialogContent>\n        <Formik\n          initialValues={{\n            name: contact ? contact.name : '',\n            number: contact ? contact.number : '',\n          }}\n          validationSchema={Yup.object({\n            name: Yup.string()\n              .matches(\n                /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n                \"Name can contain only letters, ', - and space. For example: Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan etc.\",\n              )\n              .required(),\n            number: Yup.string()\n              .matches(\n                /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n                'Phone number should contain only numbers and it also could contain spaces, dash, parenthesis and startts with +',\n              )\n              .required(),\n          })}\n          onSubmit={onSubmit}\n        >\n          {({ isSubmitting }) => (\n            <Form>\n              <Field\n                name=\"name\"\n                type=\"text\"\n                label=\"Name\"\n                component={TextField}\n                className={c.field}\n                fullWidth\n              />\n              <Field\n                name=\"number\"\n                type=\"tel\"\n                label=\"Phone number\"\n                component={TextField}\n                className={c.field}\n                fullWidth\n              />\n              {isSubmitting && <LinearProgress />}\n\n              <DialogActions>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={isSubmitting}\n                  type=\"submit\"\n                >\n                  Save contact\n                </Button>\n                <Button onClick={onClose} color=\"primary\">\n                  Cancel\n                </Button>\n              </DialogActions>\n            </Form>\n          )}\n        </Formik>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import {\n  Card,\n  CardActions,\n  CardContent,\n  Grid,\n  IconButton,\n  Typography,\n} from '@material-ui/core';\n\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { contactsOperations } from 'redux/contacts';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch } from 'react-redux';\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  cardActions: {\n    justifyContent: 'flex-end',\n  },\n}));\n\nexport default function ContactItem({ contact, onEdit }) {\n  const dispatch = useDispatch();\n  const c = useStyles();\n\n  return (\n    <>\n      <Grid item component=\"li\" xs={12} sm={6} md={4}>\n        <Card className={c.card}>\n          <CardContent className={c.cardContent}>\n            <Typography variant=\"h6\">{contact.name}</Typography>\n            <Typography variant=\"body1\">{contact.number}</Typography>\n          </CardContent>\n\n          <CardActions disableSpacing className={c.cardActions}>\n            <IconButton onClick={() => onEdit(contact)}>\n              <EditIcon />\n            </IconButton>\n            <IconButton\n              onClick={() =>\n                dispatch(contactsOperations.deleteContact(contact.id))\n              }\n              aria-label=\"Delete contact\"\n            >\n              <DeleteForeverIcon />\n            </IconButton>\n          </CardActions>\n        </Card>\n      </Grid>\n    </>\n  );\n}\n","import { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport ContactItem from 'components/ContactItem';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(2),\n    listStyle: 'none',\n  },\n}));\n\nexport default function ContactList({ onEdit }) {\n  const contacts = useSelector(contactsSelectors.getFilteredContacts);\n\n  const dispatch = useDispatch();\n  const c = useStyles();\n\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  return (\n    <>\n      <Grid container component=\"ul\" spacing={3} className={c.root}>\n        {contacts.length > 0 &&\n          contacts.map(contact => (\n            <ContactItem key={contact.id} contact={contact} onEdit={onEdit} />\n          ))}\n      </Grid>\n    </>\n  );\n}\n","import React from 'react';\nimport { TextField } from '@material-ui/core';\nimport { contactsActions } from 'redux/contacts';\nimport { useDispatch } from 'react-redux';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <TextField\n        type=\"text\"\n        name=\"filter\"\n        label=\"Find contacts by name:\"\n        onChange={e => {\n          dispatch(contactsActions.changeFilter(e.target.value));\n        }}\n      />\n    </div>\n  );\n}\n","import {\n  Button,\n  Container,\n  LinearProgress,\n  Typography,\n} from '@material-ui/core';\nimport { contactsActions, contactsSelectors } from '../../redux/contacts';\n\nimport ContactEditor from 'components/ContactEditor';\nimport ContactList from 'components/ContactList';\nimport ErrorNotification from 'components/ErrorNotification';\nimport Filter from 'components/Filter';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport { useState } from 'react';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nexport default function ContactsPage() {\n  const error = useSelector(contactsSelectors.getError);\n  const isLoading = useSelector(contactsSelectors.getIsLoading);\n  const [isOpenDialog, setIsOpenDialog] = useState(false);\n  const [currentContact, setCurrentContact] = useState(null);\n\n  const shouldOpenDialog = Boolean(isOpenDialog || currentContact);\n\n  const c = useStyles();\n\n  const handleDialogOpen = () => {\n    setIsOpenDialog(true);\n  };\n\n  const handleDialogClose = () => {\n    setIsOpenDialog(false);\n    setCurrentContact(null);\n  };\n\n  const handleCurrentContact = contact => {\n    setCurrentContact(contact);\n  };\n\n  return (\n    <>\n      <Container maxWidth=\"md\" className={c.root}>\n        <Button variant=\"contained\" color=\"primary\" onClick={handleDialogOpen}>\n          Add contact\n        </Button>\n        <Typography variant=\"h3\">Contacts</Typography>\n        {error && (\n          <ErrorNotification\n            message={error}\n            action={contactsActions.resetError}\n          />\n        )}\n        <Filter />\n        <ContactList onEdit={handleCurrentContact} />\n        {isLoading && <LinearProgress />}\n      </Container>\n\n      {shouldOpenDialog && (\n        <ContactEditor\n          isOpen={shouldOpenDialog}\n          onClose={handleDialogClose}\n          contact={currentContact}\n        />\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}