{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactItem/ContactItem.module.css","components/ContactList/ContactList.module.css","components/ErrorMessage/ErrorMessage.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/ErrorMessage/ErrorMessage.js","components/Filter/Filter.js","pages/ContactsPage/ContactsPage.js"],"names":["module","exports","getContacts","state","contacts","items","getFilter","filter","getFilteredContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","ContactForm","useSelector","contactsSelectors","dispatch","useDispatch","addContact","number","length","isInContacts","contactsOperations","alert","initialValues","validationSchema","Yup","matches","required","onSubmit","values","resetForm","className","s","form","label","fieldInput","type","component","validatorError","FormButton","ContactItem","item","itemName","itemPhone","onClick","deleteContact","id","size","ContactList","useEffect","fetchContacts","list","map","ErrorMessage","message","Filter","onChange","e","contactsActions","changeFilter","target","value","ContactsPage","error","isLoading","Loading"],"mappings":"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","file":"static/js/contacts-page.117c8cfa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"fieldInput\":\"ContactForm_fieldInput__3zV51\",\"validatorError\":\"ContactForm_validatorError__3ngg1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactItem_item__2KdFa\",\"itemName\":\"ContactItem_itemName__3yDih\",\"itemPhone\":\"ContactItem_itemPhone__1zXxG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"ErrorMessage_message__1PSvk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldInput\":\"Filter_fieldInput__1at_C\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getFilteredContacts = createSelector(\n  [getFilter, getContacts],\n  (filter, contacts) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","import * as Yup from 'yup';\n\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport FormButton from '../FormButton/FormButton';\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  const isInContacts = name => {\n    name = name.toLowerCase();\n    return (\n      contacts.filter(contact => contact.name.toLowerCase().includes(name))\n        .length > 0\n    );\n  };\n\n  const addContact = ({ name, number }) => {\n    if (isInContacts(name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(contactsOperations.addContact({ name, number }));\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={{ name: '', number: '' }}\n        validationSchema={Yup.object({\n          name: Yup.string()\n            .matches(\n              /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n              \"Name can contain only letters, ', - and space. For example: Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan etc.\",\n            )\n            .required(),\n          number: Yup.string()\n            .matches(\n              /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n              'Phone number should contain only numbers and it also could contain spaces, dash, parenthesis and startts with +',\n            )\n            .required(),\n        })}\n        onSubmit={(values, { resetForm }) => {\n          addContact(values);\n          resetForm();\n        }}\n      >\n        <Form className={s.form}>\n          <label className={s.label}>\n            Name:\n            <Field className={s.fieldInput} name=\"name\" type=\"text\" />\n            <ErrorMessage\n              name=\"name\"\n              component=\"span\"\n              className={s.validatorError}\n            />\n          </label>\n          <label className={s.label}>\n            Phone number:\n            <Field className={s.fieldInput} name=\"number\" type=\"tel\" />\n            <ErrorMessage\n              name=\"number\"\n              component=\"span\"\n              className={s.validatorError}\n            />\n          </label>\n          <FormButton type=\"submit\">Add contact</FormButton>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n","import FormButton from '../FormButton';\nimport { MdDelete } from 'react-icons/md';\nimport { contactsOperations } from 'redux/contacts';\nimport s from './ContactItem.module.css';\nimport { useDispatch } from 'react-redux';\n\nexport default function ContactItem({ contact }) {\n  const dispatch = useDispatch();\n\n  return (\n    <li className={s.item}>\n      <div>\n        <p className={s.itemName}>{contact.name}</p>\n        <p className={s.itemPhone}>{contact.number}</p>\n      </div>\n      <FormButton\n        onClick={() => dispatch(contactsOperations.deleteContact(contact.id))}\n        aria-label=\"Delete contact\"\n      >\n        <MdDelete size=\"18\" />\n      </FormButton>\n    </li>\n  );\n}\n","import { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport ContactItem from 'components/ContactItem';\nimport s from './ContactList.module.css';\nimport { useEffect } from 'react';\n\nexport default function ContactList() {\n  const contacts = useSelector(contactsSelectors.getFilteredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  return (\n    <ul className={s.list}>\n      {contacts.length > 0 &&\n        contacts.map(contact => (\n          <ContactItem key={contact.id} contact={contact} />\n        ))}\n    </ul>\n  );\n}\n","import React from 'react';\nimport s from './ErrorMessage.module.css';\n\nexport default function ErrorMessage({ message }) {\n  return <div className={s.message}>{message}</div>;\n}\n","import React from 'react';\nimport { contactsActions } from 'redux/contacts';\nimport s from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <label>\n        Find contacts by name:\n        <input\n          type=\"text\"\n          name=\"filter\"\n          onChange={e => {\n            dispatch(contactsActions.changeFilter(e.target.value));\n          }}\n          className={s.fieldInput}\n        />\n      </label>\n    </div>\n  );\n}\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport ErrorMessage from 'components/ErrorMessage';\nimport Filter from 'components/Filter';\nimport Loading from 'components/Loading';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\nexport default function ContactsPage() {\n  const error = useSelector(state => state.error);\n  const isLoading = useSelector(state => state.isLoading);\n\n  return (\n    <>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n      {error && <ErrorMessage message={error} />}\n      {isLoading && <Loading />}\n    </>\n  );\n}\n"],"sourceRoot":""}