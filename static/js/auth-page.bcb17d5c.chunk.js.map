{"version":3,"sources":["components/ErrorNotification/ErrorNotification.js","components/LoginForm/LoginForm.js","components/RegisterForm/RegisterForm.js","pages/AuthPage/AuthPage.js"],"names":["ErrorNotification","action","message","dispatch","useDispatch","handleErrorClose","event","reason","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","size","color","onClick","fontSize","useStyles","makeStyles","theme","field","marginBottom","spacing","LoginForm","isLoading","useSelector","authSelectors","getIsLoading","c","initialValues","email","password","validationSchema","Yup","required","min","max","onSubmit","values","setSubmitting","authOperations","logIn","component","TextField","className","name","type","label","Button","variant","disabled","RegisterForm","register","root","marginTop","cardContent","textAlign","AuthPage","error","getError","routes","location","useLocation","Container","maxWidth","Card","Paper","square","Tabs","value","pathname","Tab","Link","to","CardContent","path","authActions","resetError","LinearProgress"],"mappings":"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","file":"static/js/auth-page.bcb17d5c.chunk.js","sourcesContent":["import { IconButton, Snackbar } from '@material-ui/core';\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport { useDispatch } from 'react-redux';\n\nexport default function ErrorNotification({ action, message }) {\n  const dispatch = useDispatch();\n\n  const handleErrorClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    dispatch(action());\n  };\n\n  return (\n    <>\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        open\n        autoHideDuration={6000}\n        message={message}\n        onClose={handleErrorClose}\n        action={\n          <IconButton\n            size=\"small\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            onClick={handleErrorClose}\n          >\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        }\n      />\n    </>\n  );\n}\n","import * as Yup from 'yup';\n\nimport { Field, Form, Formik } from 'formik';\nimport { authOperations, authSelectors } from '../../redux/auth';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Button } from '@material-ui/core';\nimport { TextField } from 'formik-material-ui';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  field: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nexport default function LoginForm() {\n  const isLoading = useSelector(authSelectors.getIsLoading);\n  const dispatch = useDispatch();\n  const c = useStyles();\n\n  return (\n    <div>\n      <Formik\n        initialValues={{ email: '', password: '' }}\n        validationSchema={Yup.object({\n          email: Yup.string().email('Invalid email').required('Required'),\n          password: Yup.string()\n            .min(7, 'Password should be at least 7 symbols')\n            .max(15, 'Password should be maximum 15 symbols')\n            .required('Required'),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          dispatch(authOperations.logIn(values));\n          setSubmitting(false);\n        }}\n      >\n        <Form>\n          <Field\n            component={TextField}\n            className={c.field}\n            name=\"email\"\n            type=\"email\"\n            label=\"Email\"\n          />\n          <br />\n          <Field\n            component={TextField}\n            className={c.field}\n            name=\"password\"\n            type=\"password\"\n            label=\"Password\"\n          />\n          <br />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={isLoading}\n            type=\"submit\"\n          >\n            Login\n          </Button>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n","import * as Yup from 'yup';\n\nimport { Button } from '@material-ui/core';\nimport { Field, Form, Formik } from 'formik';\n\nimport React from 'react';\nimport { TextField } from 'formik-material-ui';\nimport { authOperations, authSelectors } from '../../redux/auth';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst useStyles = makeStyles(theme => ({\n  field: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nexport default function RegisterForm() {\n  const isLoading = useSelector(authSelectors.getIsLoading);\n  const dispatch = useDispatch();\n  const c = useStyles();\n\n  return (\n    <div>\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        validationSchema={Yup.object({\n          name: Yup.string().required('Required'),\n          email: Yup.string().email('Invalid email').required('Required'),\n          password: Yup.string()\n            .min(7, 'Password should be at least 7 symbols')\n            .max(15, 'Password should be maximum 15 symbols')\n            .required('Required'),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          dispatch(authOperations.register(values));\n          setSubmitting(false);\n        }}\n      >\n        <Form>\n          <Field\n            component={TextField}\n            className={c.field}\n            name=\"name\"\n            type=\"text\"\n            label=\"User name\"\n          />\n          <br />\n          <Field\n            component={TextField}\n            className={c.field}\n            name=\"email\"\n            type=\"email\"\n            label=\"Email\"\n          />\n          <br />\n          <Field\n            component={TextField}\n            className={c.field}\n            name=\"password\"\n            type=\"password\"\n            label=\"Password\"\n          />\n          <br />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={isLoading}\n            type=\"submit\"\n          >\n            Register\n          </Button>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n","import {\n  Card,\n  CardContent,\n  Container,\n  LinearProgress,\n  Paper,\n  Tab,\n  Tabs,\n} from '@material-ui/core';\nimport { Link, Route, Switch, useLocation } from 'react-router-dom';\nimport { authActions, authSelectors } from 'redux/auth';\n\nimport ErrorNotification from './../../components/ErrorNotification/ErrorNotification';\nimport LoginForm from 'components/LoginForm';\nimport React from 'react';\nimport RegisterForm from 'components/RegisterForm';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(2),\n  },\n  cardContent: {\n    textAlign: 'center',\n  },\n}));\n\nexport default function AuthPage() {\n  const error = useSelector(authSelectors.getError);\n  const isLoading = useSelector(authSelectors.getIsLoading);\n  const routes = ['/login', '/register'];\n  const location = useLocation();\n  const c = useStyles();\n\n  return (\n    <Container maxWidth=\"sm\" className={c.root}>\n      <Card>\n        <Paper square>\n          <Tabs value={location.pathname} variant=\"fullWidth\">\n            <Tab\n              value={routes[0]}\n              label=\"Login\"\n              component={Link}\n              to={routes[0]}\n            />\n            <Tab\n              value={routes[1]}\n              label=\"Register\"\n              component={Link}\n              to={routes[1]}\n            />\n          </Tabs>\n        </Paper>\n        <CardContent>\n          <Container className={c.cardContent}>\n            <Switch>\n              <Route path=\"/login\">\n                <LoginForm />\n              </Route>\n              <Route path=\"/register\">\n                <RegisterForm />\n              </Route>\n            </Switch>\n          </Container>\n        </CardContent>\n      </Card>\n      {error && (\n        <ErrorNotification message={error} action={authActions.resetError} />\n      )}\n      {isLoading && <LinearProgress />}\n    </Container>\n  );\n}\n"],"sourceRoot":""}